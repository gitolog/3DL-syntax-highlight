# [PackageDev] target_format: plist, ext: tmLanguage

name: Acortis (3DL)
scopeName: source.3dl
fileTypes: [3DL]
uuid: 5f6ea74d-a9dd-41ec-80d8-7e4446b40ae7

patterns:
- include: '#comments'
- include: '#support'
- include: '#core'

repository:
  core:
    patterns:
    - include: '#leading-space'

    # literals
    - include: '#literal-regex'               # before operators to avoid ambiguities
    - include: '#literal-number'
    - include: '#literal-quasi'
    - include: '#literal-language-constant'

    # keywords/operators
    - include: '#literal-keywords'

    # modules/classes/functions
    - include: '#literal-class'
    - include: '#literal-module'
    - include: '#literal-function-storage'

    # after literal-function-storage which requires the below in some cases
    - include: '#literal-string'
    - include: '#literal-language-variable'

    # function calls
    - include: '#literal-method-call'
    - include: '#literal-function-call'

    # punctuation
    - include: '#literal-labels'
    - include: '#literal-variable'
    - include: '#literal-punctuation'

    # brackets
    - include: '#brackets'

  brackets:
    patterns:
    - name: meta.group.braces.round
      begin: (\()
      beginCaptures:
        '1': {name: meta.brace.round.3dl}
      end: (\))
      endCaptures:
        '1': {name: meta.brace.round.3dl}
      patterns:
      - include: source.3dl

    - name: meta.group.braces.square
      begin: (\[)
      beginCaptures:
        '1': {name: meta.brace.square.3dl}
      end: (\])
      endCaptures:
        '1': {name: meta.brace.square.3dl}
      patterns:
      - include: source.3dl

    - name: meta.group.braces.curly
      begin: ({)
      beginCaptures:
        '1': {name: meta.brace.curly.3dl}
      end: (})
      endCaptures:
        '1': {name: meta.brace.curly.3dl}
      patterns:
      - include: source.3dl

    - name: meta.group.braces.round.double
      begin: (\(\()
      beginCaptures:
        '1': {name: meta.brace.round.double.3dl}
      end: (\)\))
      endCaptures:
        '1': {name: meta.brace.round.double.3dl}
      patterns:
      - include: source.3dl

  comments:
    patterns:
    - name: comment.block.documentation.3dl
      begin: /\*\*(?!/)
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.3dl}

    - name: comment.block.3dl
      begin: /\*
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.3dl}

    - name: comment.block.html.3dl
      match: (<!--|-->)
      captures:
        '0': {name: punctuation.definition.comment.3dl}

    - name: comment.line.double-slash.3dl
      match: (//).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.3dl}

    - name: comment.line.shebang.3dl
      match: ^(#!).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.3dl}

  function-declaration-parameters:
    patterns:
    - begin: (\()
      beginCaptures:
        '1': {name: punctuation.definition.parameters.begin.3dl}
      end: (\))
      endCaptures:
        '1': {name: punctuation.definition.parameters.end.3dl}
      patterns:
      - name: variable.parameter.function.3dl
        match: >-
          (?x)
            [_$a-zA-Z][_$\w]*

      - name: punctuation.separator.parameter.function.3dl
        match: ','

      - include: '#comments'

  literal-module:
    patterns:
    # module names are defined using strings
    - name: storage.type.module.3dl
      match: \b(Модуль(?!(\s*=)))\b

    - name: keyword.operator.module.3dl
      match: \b(import|export|from|as)\b

  literal-class:
    patterns:
    # e.g. class MyClass {  }
    - name: meta.class.3dl
      begin: >-
        (?x)
          \b(Класс)
          \s+([_$a-zA-Zа-яА-Я][$\w\s]*)
          \s+(создать если не существует)?
          \s*(\(\() # Double round brackets open
      beginCaptures:
        '1': {name: storage.type.class.3dl}
        '2': {name: entity.name.class.3dl}
        '3': {name: storage.type.extends.3dl}
        '4': {name: meta.brace.curly.3dl}
      end: (\)\))  # Double round brackets close
      endCaptures:
        '1': {name: meta.brace.curly.3dl}
      patterns:
      # e.g. play(arg1, arg2) {  }
      - name: meta.method.3dl
        begin: >-
          (?x)
            \b([_$a-zA-Z][_$\w]*)
            \s*(?=\([^())]*\)\s*\{)
        beginCaptures:
          '1': {name: entity.name.method.3dl}
        end: (?<=\)) # Single round brace close
        patterns:
        - include: '#function-declaration-parameters'

      # getter/setter
      - name: meta.accessor.3dl
        begin: \b(get|set)\s*\b([_$a-zA-Z][_$\w]*)\s*
        beginCaptures:
          '1': {name: storage.type.accessor.3dl}
          '2': {name: entity.name.accessor.3dl}
        end: (?<=\))
        patterns:
        - include: '#function-declaration-parameters'

      - include: '#brackets'
      - include: '#comments'


  literal-function-storage:
    patterns:
    # e.g. function play(arg1, arg2) {  }
    - name: meta.function.3dl
      begin: >-
        (?x)
          \b(function(?:\s*\*|(?=\s|[(])))
          \s*([_$a-zA-Z][_$\w]*)?\s*
      beginCaptures:
        '1': {name: storage.type.function.3dl}
        '2': {name: entity.name.function.3dl}
      end: (?<=\))
      patterns:
      - include: '#function-declaration-parameters'

    # e.g. Sound.play = function(arg1, arg2) {  }
    - name: meta.function.static.3dl
      begin: >-
        (?x)
          (\b_?[A-Z][_$\w]*)?
          \.([_$a-zA-Z][_$\w]*)
          \s*=
          \s*(function(?:\s*\*|(?=\s|[(])))\s*
      beginCaptures:
        '1': {name: entity.name.class.3dl}
        '2': {name: entity.name.function.3dl}
        '3': {name: storage.type.function.3dl}
      end: (?<=\))
      patterns:
      - include: '#function-declaration-parameters'

    # e.g. play: function(arg1, arg2) {  }
    - name: meta.function.3dlon.3dl
      begin: >-
        (?x)
          \b([_$a-zA-Z][_$\w]*)
          \s*(:)
          \s*(function(?:\s*\*|(?=\s|[(])))\s*
      beginCaptures:
        '1': {name: entity.name.function.3dl}
        '2': {name: punctuation.separator.key-value.3dl}
        '3': {name: storage.type.function.3dl}
      end: (?<=\))
      patterns:
      - include: '#function-declaration-parameters'

    # e.g. "play": function(arg1, arg2) {  }
    - name: meta.function.3dlon.3dl
      begin: >-
        (?x)
          (?:
            ((')(.*?)(?<!\\)('))|
            ((")(.*?)(?<!\\)("))
          )\s*
          (:)\s*
          \b(function(?:\s*\*|(?=\s|[(])))\s*
      beginCaptures:
        '1': {name: string.quoted.single.3dl}
        '2': {name: punctuation.definition.string.begin.3dl}
        '3': {name: entity.name.function.3dl}
        '4': {name: punctuation.definition.string.end.3dl}
        '5': {name: string.quoted.double.3dl}
        '6': {name: punctuation.definition.string.begin.3dl}
        '7': {name: entity.name.function.3dl}
        '8': {name: punctuation.definition.string.end.3dl}
        '9': {name: punctuation.separator.key-value.3dl}
        '10': {name: storage.type.function.3dl}
      end: (?<=\))
      patterns:
      - include: '#function-declaration-parameters'

  literal-function-call:
    patterns:
    - name: meta.function-call.without-arguments.3dl
      match: >-
        (?x)
          ([_$a-zA-Z][_$\w]*)\s*
          (\(\s*\))
      captures:
        '1': {name: entity.name.function.3dl}
        '2': {name: meta.group.braces.round.function.arguments.3dl}

    - name: meta.function-call.with-arguments.3dl
      match: >-
        (?x)
          ([_$a-zA-Z][_$\w]*)\s*
          (?=\()
      captures:
        '1': {name: entity.name.function.3dl}

  literal-method-call:
    patterns:
    - name: meta.function-call.static.without-arguments.3dl
      match: >-
        (?x)
          (?:(?<=\.)|\b)
          ([A-Z][_$\w]*)\s*\.
          ([_$a-zA-Z][_$\w]*)\s*
          (\(\s*\))
      captures:
        '1': {name: variable.other.class.3dl}
        '2': {name: entity.name.function.3dl}
        '3': {name: meta.group.braces.round.function.arguments.3dl}

    - name: meta.function-call.static.with-arguments.3dl
      match: >-
        (?x)
          (?:(?<=\.)|\b)
          ([A-Z][_$\w]*)\s*\.
          ([_$a-zA-Z][_$\w]*)\s*
          (?=\()
      captures:
        '1': {name: variable.other.class.3dl}
        '2': {name: entity.name.function.3dl}

    - name: meta.function-call.method.without-arguments.3dl
      match: >-
        (?x)
          (?<=\.)
          ([_$a-zA-Z][_$\w]*)\s*
          (\(\s*\))
      captures:
        '1': {name: entity.name.function.3dl}
        '2': {name: meta.group.braces.round.function.arguments.3dl}

    - name: meta.function-call.method.with-arguments.3dl
      match: >-
        (?x)
          (?<=\.)
          ([_$a-zA-Z][_$\w]*)\s*
          (?=\()
      captures:
        '1': {name: entity.name.function.3dl}

  literal-language-variable:
    patterns:
    - name: variable.language.arguments.3dl
      match: (?<!\.)\b(arguments)\b

    - name: variable.language.super.3dl
      match: (?<!\.)\b(super)\b

    - name: variable.language.this.3dl
      match: (?<!\.)\b(this)\b

    - name: variable.language.self.3dl
      match: (?<!\.)\b(self)\b

    - name: variable.language.proto.3dl
      match: (?<=\.)\b(__proto__)\b

    - name: variable.language.constructor.3dl
      match: (?<=\.)\b(constructor)\b

    - name: variable.language.prototype.3dl
      match: (?<=\.)\b(prototype)\b

  literal-language-constant:
    patterns:
    - name: constant.language.boolean.true.3dl
      match: \btrue\b

    - name: constant.language.boolean.false.3dl
      match: \bfalse\b

    - name: constant.language.null.3dl
      match: \bnull\b

    - name: constant.language.undefined.3dl
      match: \bundefined\b

    - name: constant.language.nan.3dl
      match: \bNaN\b

  literal-keywords:
    patterns:
    - name: meta.instance.constructor
      begin: (new)\s+(?=[_$a-zA-Z][_$\w.]*)
      beginCaptures:
        '1': {name: keyword.operator.new.3dl}
      end: (?![_$a-zA-Z][_$\w.]*)
      patterns:
      - include: '#support'

      - match: ([_$a-zA-Z][_$\w.]*\.)?([_$a-zA-Z][_$\w]*)
        captures:
          '2': {name: entity.name.type.new.3dl}

    - name: storage.type.3dl
      match: \b(var|let|const)\b

    - name: keyword.control.flow.3dl
      match: \b(return|yield)\b

    - name: keyword.control.conditional.3dl
      match: \b(ЕСЛИ|Если|если|ТО|То|то|ИНАЧЕ|Иначе|иначе|else|if)\b

    - name: keyword.control.trycatch.3dl
      match: \b(catch|finally|throw|try)\b

    - name: keyword.control.loop.3dl
      match: \b(break|continue|do|for|goto|while)\b

    - name: keyword.control.switch.3dl
      match: \b(case|default|switch)\b

    - name: keyword.operator.3dl
      match: \b(delete|in(stanceof)?|of|new|typeof|void|with)\b

    - name: keyword.operator.3dl
      match: '!|%|&|\*|--|-|\+\+|\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\|\||\?\:|\*=|/=|%=|\+=|-=|&=|\^='

    - name: punctuation.separator.key-value
      match: ':'

    - name: keyword.operator.logical.3dl
      match: >-
        (?x)
          !(?!=)| # logical-not     right-to-left   right
          &&    | # logical-and     left-to-right   both
          \|\|   # logical-or      left-to-right   both

    - name: keyword.operator.assignment.augmented.3dl
      match: >-
        (?x)
            %= | # assignment      right-to-left   both
            &= | # assignment      right-to-left   both
           \*= | # assignment      right-to-left   both
           \+= | # assignment      right-to-left   both
            -= | # assignment      right-to-left   both
            /= | # assignment      right-to-left   both
           \^= | # assignment      right-to-left   both
           \|= | # assignment      right-to-left   both
           <<= | # assignment      right-to-left   both
           >>= | # assignment      right-to-left   both
          >>>=   # assignment      right-to-left   both

    - name: keyword.operator.bitwise.3dl
      match: >-
        (?x)
          ~    | # bitwise-not     right-to-left   right
          <<   | # bitwise-shift   left-to-right   both
          >>>  | # bitwise-shift   left-to-right   both
          >>   | # bitwise-shift   left-to-right   both
          &    | # bitwise-and     left-to-right   both
          \^   | # bitwise-xor     left-to-right   both
          \|     # bitwise-or      left-to-right   both

    - name: keyword.operator.relational.3dl
      match: >-
        (?x)
          <=   | # relational      left-to-right   both
          >=   | # relational      left-to-right   both
          <    | # relational      left-to-right   both
          >      # relational      left-to-right   both

    - name: keyword.operator.comparison.3dl
      match: >-
        (?x)
          ===  | # equality        left-to-right   both
          !==  | # equality        left-to-right   both
           ==  | # equality        left-to-right   both
          !=     # equality        left-to-right   both

    - name: keyword.operator.assignment.3dl
      match: (?x)=

    - name: keyword.operator.arithmetic.3dl
      match: >-
        (?x)
          --   | # decrement       n/a             right-or-left
          \+\+ | # increment       n/a             right-or-left
          /    | # division        left-to-right   both
          %    | # modulus         left-to-right   both
          \*   | # multiplication  left-to-right   both
          \+   | # addition        left-to-right   both
          -      # subtraction     left-to-right   both

  literal-labels:
    patterns:
    - match: (?<=['"])(\s*)(:)
      captures:
        '2': {name: punctuation.separator.key-value.3dl}

    - name: constant.other.object.key.3dl
      match: (?<!\?|\? |case )(?!\?)([_$a-zA-Z][_$\w]*)\s*(:)
      captures:
        '1': {name: string.unquoted.label.3dl}
        '2': {name: punctuation.separator.key-value.3dl}

  literal-number:
    patterns:
    - name: invalid.illegal.numeric.hex.3dl
      match: (?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+)

    - name: invalid.illegal.numeric.octal.3dl
      match: (?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+)

    - name: constant.numeric.3dl
      match: >-
        (?xi)
          (?:\B[-+])?
          (?:
            \b0x[0-9a-f]*|              # hex
            (
              \B\.[0-9]+|               # e.g. .999
              \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
            )(e[-+]?[0-9]+)?            # e.g. e+123, E-123
          )

    - name: constant.language.infinity.3dl
      match: (?:\B[-+]|\b)(Infinity)\b

  literal-punctuation:
    patterns:
    - name: punctuation.terminator.statement.3dl
      match: \;

    - name: meta.delimiter.object.comma.3dl
      match: ','

    - name: meta.delimiter.method.period.3dl
      match: \.

  literal-quasi:
    patterns:
    - name: string.quasi.3dl
      begin: ([a-zA-Z$_][\w$_]*)?(`)
      beginCaptures:
        '1': {name: entity.quasi.tag.name.3dl}
        '2': {name: punctuation.definition.quasi.begin.3dl}
      end: '`'
      endCaptures:
        '0': {name: punctuation.definition.quasi.end.3dl}
      patterns:
      - name: entity.quasi.element.3dl
        begin: \${
        beginCaptures:
          '0': {name: punctuation.quasi.element.begin.3dl}
        end: '}'
        endCaptures:
          '0': {name: punctuation.quasi.element.end.3dl}
        patterns:
        - include: source.3dl

  literal-regex:
    patterns:
    # ignore ++, -- since they're uncommon, distinguishing them is not possible in sublime text, see:
    #   http://stackoverflow.com/questions/5519596/when-parsing-javascript-what-determines-the-meaning-of-a-slash
    - contentName: string.regexp.3dl
      begin: >-
        (?x)
          (?:(?<=
            \.|\(|,|{|}|\[|;|,|<|>|<=|>=|==|!=|===|!==|\+|-|\*|%|\+\+|--|<<|>>|>>>|&|\||\^|!|~|&&|\|\||\?|:|=|\+=|-=|\*=|%=|<<=|>>=|>>>=|&=|\|=|\^=|/|/=|
            \Wnew|\Wdelete|\Wvoid|\Wtypeof|\Winstanceof|\Win|\Wdo|\Wreturn|\Wcase|\Wthrow|
            ^new|^delete|^void|^typeof|^instanceof|^in|^do|^return|^case|^throw
          )|^)\s*
          (/)
          (?!/|\*|$)
      beginCaptures:
        '1': {name: string.regexp.3dl}
        '2': {name: punctuation.definition.string.begin.3dl}
      end: ((/)([gimy]*))
      endCaptures:
        '1': {name: string.regexp.3dl}
        '2': {name: punctuation.definition.string.end.3dl}
        '3': {name: keyword.other.3dl}
      patterns:
      - include: source.regexp.3dl

  literal-string:
    patterns:
    - name: string.quoted.single.3dl
      begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.3dl}
      end: (')|(\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.3dl}
        '2': {name: invalid.illegal.newline.3dl}
      patterns:
      - include: '#string-content'

    - name: string.quoted.double.3dl
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.3dl}
      end: (")|(\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.3dl}
        '2': {name: invalid.illegal.newline.3dl}
      patterns:
      - include: '#string-content'

  string-content:
    patterns:
    - name: constant.character.escape.newline.3dl
      match: \\\s*\n

    - name: constant.character.escape.3dl
      match: \\(x[\da-fA-F]{2}|u[\da-fA-F]{4}|.)

  literal-variable:
    patterns:
    # e.g. .CONSTANT
    - name: variable.other.constant.3dl
      match: \.?[A-Z][_$\dA-Z]*\b

    # e.g. Class.property
    - name: meta.property.class.3dl
      match: >-
        (?x)
          \b([A-Z][_$\w]*)\s*\.
          ([_$a-zA-Z][_$\w]*)
      captures:
        '1': {name: variable.other.class.3dl}
        '2': {name: variable.other.property.static.3dl}

    # e.g. obj.property
    - name: variable.other.object.3dl
      match: (?<!\.)[_$a-zA-Z][_$\w]*\s*(?=[\[\.])
      captures:
        '1': {name: variable.other.object.3dl}

    # e.g. obj.property
    - name: meta.property.object.3dl
      match: (?<=[\.])\s*[_$a-zA-Z][_$\w]*
      captures:
        '2': {name: variable.other.property.3dl}

    - name: variable.other.readwrite.3dl
      match: '[_$a-zA-Z][_$\w]*'

  leading-space:
    patterns:
    - name: meta.leading-tabs
      begin: ^(?=(\t|  ))
      end: (?=[^\t\s])
      patterns:
      - match: (    )(    )?(    )?(    )?(    )?(    )?(    )?(    )?(    )?(    )?(    )?
        captures:
          '1': {name: meta.odd-tab.group1.spaces}
          '2': {name: meta.even-tab.group2.spaces}
          '3': {name: meta.odd-tab.group3.spaces}
          '4': {name: meta.even-tab.group4.spaces}
          '5': {name: meta.odd-tab.group5.spaces}
          '6': {name: meta.even-tab.group6.spaces}
          '7': {name: meta.odd-tab.group7.spaces}
          '8': {name: meta.even-tab.group8.spaces}
          '9': {name: meta.odd-tab.group9.spaces}
          '10': {name: meta.even-tab.group10.spaces}
          '11': {name: meta.odd-tab.group11.spaces}

      - match: (\t)(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?
        captures:
          '1': {name: meta.odd-tab.group1.tab}
          '2': {name: meta.even-tab.group2.tab}
          '3': {name: meta.odd-tab.group3.tab}
          '4': {name: meta.even-tab.group4.tab}
          '5': {name: meta.odd-tab.group5.tab}
          '6': {name: meta.even-tab.group6.tab}
          '7': {name: meta.odd-tab.group7.tab}
          '8': {name: meta.even-tab.group8.tab}
          '9': {name: meta.odd-tab.group9.tab}
          '10': {name: meta.even-tab.group10.tab}
          '11': {name: meta.odd-tab.group11.tab}

  support:
    patterns:
    # built-ins
    - name: support.class.builtin.3dl
      match: \b(Array|Boolean|Date|Function|Map|Math|Number|Object|Proxy|RegExp|Set|String|WeakMap)\b

    - name: support.function.3dl
      match: \b(decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|unescape)\b(?=\()

    - name: support.function.mutator.3dl
      match: \b(shift|sort|splice|unshift|pop|push|reverse)\b(?=\()

    - name: support.class.error.3dl
      match: \b((Eval|Range|Reference|Syntax|Type|URI)?Error)\b

    # debugger
    - name: keyword.other.3dl
      match: \b(debugger)\b

    # dom
    - name: support.type.object.dom.3dl
      match: \b(document|window)\b

    - name: support.constant.dom.3dl
      match: >-
        (?x)
          \b(
            ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|
            DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|
            WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR
          )\b

    # firebug
    - name: support.type.object.firebug.3dl
      match: \b(console)\b

    - name: support.function.firebug.3dl
      match: \.(warn|info|log|error|time|timeEnd|assert)\b

    # node
    - name: support.module.node.3dl
      match: \b(natives|buffer|child_process|cluster|crypto|dgram|dns|fs|http|https|net|os|path|punycode|string|string_decoder|readline|repl|tls|tty|util|vm|zlib)\b

    - name: support.type.object.node.3dl
      match: \b(process|process\.env|global|GLOBAL|root|stdout|stdin|stderr|exports|__dirname|__filename|console)\b

    - name: support.class.node.3dl
      match: \b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b