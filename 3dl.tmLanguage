<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>3DL</string>
	</array>
	<key>name</key>
	<string>Acortis (3DL)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#support</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#core</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.3dl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.round</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.3dl</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.3dl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.square</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.3dl</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>({)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.3dl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.curly</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.3dl</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.double.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\)\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.double.3dl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.round.double</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.3dl</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.documentation.3dl</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.3dl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(&lt;!--|--&gt;)</string>
					<key>name</key>
					<string>comment.block.html.3dl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(//).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.3dl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(#!).*$\n?</string>
					<key>name</key>
					<string>comment.line.shebang.3dl</string>
				</dict>
			</array>
		</dict>
		<key>core</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#leading-space</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-regex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-number</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-quasi</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-constant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-storage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-class</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-module</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-method-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-punctuation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#brackets</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration-parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.3dl</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?x)
  [_$a-zA-Z][_$\w]*</string>
							<key>name</key>
							<string>variable.parameter.function.3dl</string>
						</dict>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameter.function.3dl</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>leading-space</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^(?=(\t|  ))</string>
					<key>end</key>
					<string>(?=[^\t\s])</string>
					<key>name</key>
					<string>meta.leading-tabs</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group1.spaces</string>
								</dict>
								<key>10</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group10.spaces</string>
								</dict>
								<key>11</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group11.spaces</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group2.spaces</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group3.spaces</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group4.spaces</string>
								</dict>
								<key>5</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group5.spaces</string>
								</dict>
								<key>6</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group6.spaces</string>
								</dict>
								<key>7</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group7.spaces</string>
								</dict>
								<key>8</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group8.spaces</string>
								</dict>
								<key>9</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group9.spaces</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(    )(    )?(    )?(    )?(    )?(    )?(    )?(    )?(    )?(    )?(    )?</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group1.tab</string>
								</dict>
								<key>10</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group10.tab</string>
								</dict>
								<key>11</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group11.tab</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group2.tab</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group3.tab</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group4.tab</string>
								</dict>
								<key>5</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group5.tab</string>
								</dict>
								<key>6</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group6.tab</string>
								</dict>
								<key>7</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group7.tab</string>
								</dict>
								<key>8</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group8.tab</string>
								</dict>
								<key>9</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group9.tab</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(\t)(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  \b(Класс)
  \s+([_$a-zA-Zа-яА-Я][$\w\s\\]*)
  \s+(создать если не существует)?
  \s*(\(\() # Double round brackets open</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.3dl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.extends.3dl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\)\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.3dl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.class.3dl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?x)
  \b([_$a-zA-Z][_$\w]*)
  \s*(?=\([^())]*\)\s*\{)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.method.3dl</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?&lt;=\))</string>
							<key>name</key>
							<string>meta.method.3dl</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#function-declaration-parameters</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>\b(get|set)\s*\b([_$a-zA-Z][_$\w]*)\s*</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.type.accessor.3dl</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>entity.name.accessor.3dl</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?&lt;=\))</string>
							<key>name</key>
							<string>meta.accessor.3dl</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#function-declaration-parameters</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#brackets</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  ([_$a-zA-Z][_$\w]*)\s*
  (\(\s*\))</string>
					<key>name</key>
					<string>meta.function-call.without-arguments.3dl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  ([_$a-zA-Z][_$\w]*)\s*
  (?=\()</string>
					<key>name</key>
					<string>meta.function-call.with-arguments.3dl</string>
				</dict>
			</array>
		</dict>
		<key>literal-function-storage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  \b(function(?:\s*\*|(?=\s|[(])))
  \s*([_$a-zA-Z][_$\w]*)?\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.3dl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (\b_?[A-Z][_$\w]*)?
  \.([_$a-zA-Z][_$\w]*)
  \s*=
  \s*(function(?:\s*\*|(?=\s|[(])))\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.3dl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.static.3dl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  \b([_$a-zA-Z][_$\w]*)
  \s*(:)
  \s*(function(?:\s*\*|(?=\s|[(])))\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.3dl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.3dlon.3dl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?:
    ((')(.*?)(?&lt;!\\)('))|
    ((")(.*?)(?&lt;!\\)("))
  )\s*
  (:)\s*
  \b(function(?:\s*\*|(?=\s|[(])))\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.3dl</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.3dl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.3dl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.3dl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.3dl</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.3dl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.3dl</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.3dl</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.3dlon.3dl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(new)\s+(?=[_$a-zA-Z][_$\w.]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.new.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?![_$a-zA-Z][_$\w.]*)</string>
					<key>name</key>
					<string>meta.instance.constructor</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#support</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>entity.name.type.new.3dl</string>
								</dict>
							</dict>
							<key>match</key>
							<string>([_$a-zA-Z][_$\w.]*\.)?([_$a-zA-Z][_$\w]*)</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(var|let|const)\b</string>
					<key>name</key>
					<string>storage.type.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(return|yield)\b</string>
					<key>name</key>
					<string>keyword.control.flow.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(ЕСЛИ|Если|если|ТО|То|то|ИНАЧЕ|Иначе|иначе|else|if)\b</string>
					<key>name</key>
					<string>keyword.control.conditional.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(catch|finally|throw|try)\b</string>
					<key>name</key>
					<string>keyword.control.trycatch.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(break|continue|do|for|goto|while)\b</string>
					<key>name</key>
					<string>keyword.control.loop.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(case|default|switch)\b</string>
					<key>name</key>
					<string>keyword.control.switch.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(delete|in(stanceof)?|of|new|typeof|void|with)\b</string>
					<key>name</key>
					<string>keyword.operator.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>!|%|&amp;|\*|--|-|\+\+|\+|~|===|==|=|!=|!==|&lt;=|&gt;=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&lt;&gt;|&lt;|&gt;|!|&amp;&amp;|\|\||\?\:|\*=|/=|%=|\+=|-=|&amp;=|\^=</string>
					<key>name</key>
					<string>keyword.operator.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>:</string>
					<key>name</key>
					<string>punctuation.separator.key-value</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  !(?!=)| # logical-not     right-to-left   right
  &amp;&amp;    | # logical-and     left-to-right   both
  \|\|   # logical-or      left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.logical.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
    %= | # assignment      right-to-left   both
    &amp;= | # assignment      right-to-left   both
   \*= | # assignment      right-to-left   both
   \+= | # assignment      right-to-left   both
    -= | # assignment      right-to-left   both
    /= | # assignment      right-to-left   both
   \^= | # assignment      right-to-left   both
   \|= | # assignment      right-to-left   both
   &lt;&lt;= | # assignment      right-to-left   both
   &gt;&gt;= | # assignment      right-to-left   both
  &gt;&gt;&gt;=   # assignment      right-to-left   both</string>
					<key>name</key>
					<string>keyword.operator.assignment.augmented.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  ~    | # bitwise-not     right-to-left   right
  &lt;&lt;   | # bitwise-shift   left-to-right   both
  &gt;&gt;&gt;  | # bitwise-shift   left-to-right   both
  &gt;&gt;   | # bitwise-shift   left-to-right   both
  &amp;    | # bitwise-and     left-to-right   both
  \^   | # bitwise-xor     left-to-right   both
  \|     # bitwise-or      left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.bitwise.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  &lt;=   | # relational      left-to-right   both
  &gt;=   | # relational      left-to-right   both
  &lt;    | # relational      left-to-right   both
  &gt;      # relational      left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.relational.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  ===  | # equality        left-to-right   both
  !==  | # equality        left-to-right   both
   ==  | # equality        left-to-right   both
  !=     # equality        left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.comparison.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)=</string>
					<key>name</key>
					<string>keyword.operator.assignment.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  --   | # decrement       n/a             right-or-left
  \+\+ | # increment       n/a             right-or-left
  /    | # division        left-to-right   both
  %    | # modulus         left-to-right   both
  \*   | # multiplication  left-to-right   both
  \+   | # addition        left-to-right   both
  -      # subtraction     left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.3dl</string>
				</dict>
			</array>
		</dict>
		<key>literal-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=['"])(\s*)(:)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.label.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\?|\? |case )(?!\?)([_$a-zA-Z][_$\w]*)\s*(:)</string>
					<key>name</key>
					<string>constant.other.object.key.3dl</string>
				</dict>
			</array>
		</dict>
		<key>literal-language-constant</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\btrue\b</string>
					<key>name</key>
					<string>constant.language.boolean.true.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bfalse\b</string>
					<key>name</key>
					<string>constant.language.boolean.false.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bnull\b</string>
					<key>name</key>
					<string>constant.language.null.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bundefined\b</string>
					<key>name</key>
					<string>constant.language.undefined.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bNaN\b</string>
					<key>name</key>
					<string>constant.language.nan.3dl</string>
				</dict>
			</array>
		</dict>
		<key>literal-language-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(arguments)\b</string>
					<key>name</key>
					<string>variable.language.arguments.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(super)\b</string>
					<key>name</key>
					<string>variable.language.super.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(this)\b</string>
					<key>name</key>
					<string>variable.language.this.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(self)\b</string>
					<key>name</key>
					<string>variable.language.self.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\b(__proto__)\b</string>
					<key>name</key>
					<string>variable.language.proto.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\b(constructor)\b</string>
					<key>name</key>
					<string>variable.language.constructor.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\b(prototype)\b</string>
					<key>name</key>
					<string>variable.language.prototype.3dl</string>
				</dict>
			</array>
		</dict>
		<key>literal-method-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.3dl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?:(?&lt;=\.)|\b)
  ([A-Z][_$\w]*)\s*\.
  ([_$a-zA-Z][_$\w]*)\s*
  (\(\s*\))</string>
					<key>name</key>
					<string>meta.function-call.static.without-arguments.3dl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?:(?&lt;=\.)|\b)
  ([A-Z][_$\w]*)\s*\.
  ([_$a-zA-Z][_$\w]*)\s*
  (?=\()</string>
					<key>name</key>
					<string>meta.function-call.static.with-arguments.3dl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?&lt;=\.)
  ([_$a-zA-Z][_$\w]*)\s*
  (\(\s*\))</string>
					<key>name</key>
					<string>meta.function-call.method.without-arguments.3dl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?&lt;=\.)
  ([_$a-zA-Z][_$\w]*)\s*
  (?=\()</string>
					<key>name</key>
					<string>meta.function-call.method.with-arguments.3dl</string>
				</dict>
			</array>
		</dict>
		<key>literal-module</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(Модуль(?!(\s*=)))\b</string>
					<key>name</key>
					<string>storage.type.module.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(import|export|from|as)\b</string>
					<key>name</key>
					<string>keyword.operator.module.3dl</string>
				</dict>
			</array>
		</dict>
		<key>literal-number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+)</string>
					<key>name</key>
					<string>invalid.illegal.numeric.hex.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+)</string>
					<key>name</key>
					<string>invalid.illegal.numeric.octal.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?xi)
  (?:\B[-+])?
  (?:
    \b0x[0-9a-f]*|              # hex
    (
      \B\.[0-9]+|               # e.g. .999
      \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
    )(e[-+]?[0-9]+)?            # e.g. e+123, E-123
  )</string>
					<key>name</key>
					<string>constant.numeric.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\B[-+]|\b)(Infinity)\b</string>
					<key>name</key>
					<string>constant.language.infinity.3dl</string>
				</dict>
			</array>
		</dict>
		<key>literal-punctuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\;</string>
					<key>name</key>
					<string>punctuation.terminator.statement.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>meta.delimiter.method.period.3dl</string>
				</dict>
			</array>
		</dict>
		<key>literal-quasi</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>([a-zA-Z$_][\w$_]*)?(`)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.quasi.tag.name.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.quasi.begin.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>`</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.quasi.end.3dl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quasi.3dl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\${</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.quasi.element.begin.3dl</string>
								</dict>
							</dict>
							<key>end</key>
							<string>}</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.quasi.element.end.3dl</string>
								</dict>
							</dict>
							<key>name</key>
							<string>entity.quasi.element.3dl</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>source.3dl</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-regex</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?:(?&lt;=
    \.|\(|,|{|}|\[|;|,|&lt;|&gt;|&lt;=|&gt;=|==|!=|===|!==|\+|-|\*|%|\+\+|--|&lt;&lt;|&gt;&gt;|&gt;&gt;&gt;|&amp;|\||\^|!|~|&amp;&amp;|\|\||\?|:|=|\+=|-=|\*=|%=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&amp;=|\|=|\^=|/|/=|
    \Wnew|\Wdelete|\Wvoid|\Wtypeof|\Winstanceof|\Win|\Wdo|\Wreturn|\Wcase|\Wthrow|
    ^new|^delete|^void|^typeof|^instanceof|^in|^do|^return|^case|^throw
  )|^)\s*
  (/)
  (?!/|\*|$)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.regexp.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.3dl</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>string.regexp.3dl</string>
					<key>end</key>
					<string>((/)([gimy]*))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.regexp.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.3dl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.other.3dl</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.regexp.3dl</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(')|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.newline.3dl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.3dl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.3dl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.newline.3dl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.3dl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\.?[A-Z][_$\dA-Z]*\b</string>
					<key>name</key>
					<string>variable.other.constant.3dl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.3dl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.static.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  \b([A-Z][_$\w]*)\s*\.
  ([_$a-zA-Z][_$\w]*)</string>
					<key>name</key>
					<string>meta.property.class.3dl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)[_$a-zA-Z][_$\w]*\s*(?=[\[\.])</string>
					<key>name</key>
					<string>variable.other.object.3dl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.3dl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=[\.])\s*[_$a-zA-Z][_$\w]*</string>
					<key>name</key>
					<string>meta.property.object.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$a-zA-Z][_$\w]*</string>
					<key>name</key>
					<string>variable.other.readwrite.3dl</string>
				</dict>
			</array>
		</dict>
		<key>string-content</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\s*\n</string>
					<key>name</key>
					<string>constant.character.escape.newline.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\(x[\da-fA-F]{2}|u[\da-fA-F]{4}|.)</string>
					<key>name</key>
					<string>constant.character.escape.3dl</string>
				</dict>
			</array>
		</dict>
		<key>support</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(Array|Boolean|Date|Function|Map|Math|Number|Object|Proxy|RegExp|Set|String|WeakMap)\b</string>
					<key>name</key>
					<string>support.class.builtin.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|unescape)\b(?=\()</string>
					<key>name</key>
					<string>support.function.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(shift|sort|splice|unshift|pop|push|reverse)\b(?=\()</string>
					<key>name</key>
					<string>support.function.mutator.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((Eval|Range|Reference|Syntax|Type|URI)?Error)\b</string>
					<key>name</key>
					<string>support.class.error.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(debugger)\b</string>
					<key>name</key>
					<string>keyword.other.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(document|window)\b</string>
					<key>name</key>
					<string>support.type.object.dom.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  \b(
    ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|
    DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|
    WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR
  )\b</string>
					<key>name</key>
					<string>support.constant.dom.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(console)\b</string>
					<key>name</key>
					<string>support.type.object.firebug.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.(warn|info|log|error|time|timeEnd|assert)\b</string>
					<key>name</key>
					<string>support.function.firebug.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(natives|buffer|child_process|cluster|crypto|dgram|dns|fs|http|https|net|os|path|punycode|string|string_decoder|readline|repl|tls|tty|util|vm|zlib)\b</string>
					<key>name</key>
					<string>support.module.node.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(process|process\.env|global|GLOBAL|root|stdout|stdin|stderr|exports|__dirname|__filename|console)\b</string>
					<key>name</key>
					<string>support.type.object.node.3dl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b</string>
					<key>name</key>
					<string>support.class.node.3dl</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.3dl</string>
	<key>uuid</key>
	<string>5f6ea74d-a9dd-41ec-80d8-7e4446b40ae7</string>
</dict>
</plist>
